Metadata-Version: 2.4
Name: ml-teammate
Version: 0.1.0
Summary: An AutoML framework for machine learning automation
Home-page: https://github.com/muma005/MLTeammate
Author: muma005
Author-email: muma005 <your.email@example.com>
License: MIT
Project-URL: Homepage, https://github.com/muma005/MLTeammate
Project-URL: Repository, https://github.com/muma005/MLTeammate
Project-URL: Documentation, https://github.com/muma005/MLTeammate/blob/main/README.md
Project-URL: Bug Reports, https://github.com/muma005/MLTeammate/issues
Classifier: Development Status :: 3 - Alpha
Classifier: Intended Audience :: Developers
Classifier: Intended Audience :: Science/Research
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Classifier: Topic :: Scientific/Engineering :: Artificial Intelligence
Classifier: Topic :: Software Development :: Libraries :: Python Modules
Requires-Python: >=3.8
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: scikit-learn>=1.0.0
Requires-Dist: pandas>=1.3.0
Requires-Dist: numpy>=1.21.0
Requires-Dist: matplotlib>=3.5.0
Requires-Dist: mlflow>=1.20.0
Requires-Dist: optuna>=3.0.0
Requires-Dist: flaml>=1.0.0
Provides-Extra: dev
Requires-Dist: pytest>=6.0.0; extra == "dev"
Requires-Dist: pytest-cov>=2.0.0; extra == "dev"
Requires-Dist: black>=21.0.0; extra == "dev"
Requires-Dist: flake8>=3.9.0; extra == "dev"
Provides-Extra: full
Requires-Dist: xgboost>=1.5.0; extra == "full"
Requires-Dist: lightgbm>=3.2.0; extra == "full"
Requires-Dist: h2o>=3.36.0; extra == "full"
Dynamic: author
Dynamic: home-page
Dynamic: license-file
Dynamic: requires-python


# 🤖 MLTeammate

**MLTeammate** is a lightweight, modular AutoML framework built for transparency, experimentation, and extensibility.  
It integrates powerful tools like Optuna, XGBoost, LightGBM, and MLflow — allowing you to build smart pipelines with full control.

> 🔍 Designed for researchers, students, and developers who want clarity in their ML workflows — not just magic.

---

## 🚀 Features

- 🚀 **Simple API** - Use MLTeammate without writing custom code
- 🔄 Cross-validation support (built-in)
- 🧠 **12 Core learners** (Random Forest, SVM, XGBoost, LightGBM, etc.)
- 🧪 Hyperparameter tuning with Optuna
- 🔬 MLflow experiment tracking (optional)
- ⚙️ Easy to extend with custom learners & config spaces
- 🧩 Clean modular architecture (great for hacking & research)

## 📊 Available Learners

### Classification (6)
- Random Forest, Logistic Regression, SVM, Gradient Boosting
- XGBoost, LightGBM

### Regression (6)  
- Linear Regression, Ridge, Random Forest Regressor
- Gradient Boosting Regressor, XGBoost, LightGBM

**Just specify learner names as strings!** No custom classes needed.

---

## 📦 Installation

You can install MLTeammate in two ways:

### Option 1: Clone the repo (recommended for development)

```bash
git clone https://github.com/yourusername/ml_teammate.git
cd ml_teammate
pip install -r requirements.txt
````

### Option 2: Install directly via pip (⚠️ only works if  published )

```bash
pip install git+https://github.com/yourusername/ml_teammate.git
```

> You can also install it in editable mode for development:

```bash
pip install -e .
```

---

## 🧠 Quickstart Examples

### 🚀 Pandas-Style API (Recommended for most users)

**Zero function definitions required!** Just like using pandas:

```python
from ml_teammate.interface import SimpleAutoML, quick_classification

# Option 1: Auto-execution with smart defaults
automl = SimpleAutoML()
automl.quick_classify(X_train, y_train)  # Auto-executes and prints results!

# Option 2: Method chaining (like pandas)
automl = SimpleAutoML()
automl.with_mlflow().with_flaml(time_budget=30).quick_classify(X_train, y_train)

# Option 3: One-liner function (ultimate simplicity)
automl = quick_classification(X_train, y_train)  # Auto-configures everything!

# Option 4: Explore available learners
automl = SimpleAutoML()
automl.explore_learners()  # Auto-prints all available learners
```

### 🔧 Advanced API (For power users)

```python
from ml_teammate.automl.controller import AutoMLController
from ml_teammate.learners.xgboost_learner import get_xgboost_learner
from ml_teammate.search.optuna_search import OptunaSearcher
from ml_teammate.search.config_space import xgboost_config

controller = AutoMLController(
    learners={"xgboost": get_xgboost_learner},
    config_space={"xgboost": xgboost_config},
    searcher=OptunaSearcher({"xgboost": xgboost_config}),
    task="classification",
    n_trials=5,
    cv=3
)

controller.fit(X_train, y_train)
print("Test Score:", controller.score(X_test, y_test))
```

More examples in [`/tutorials`](./tutorials)

---

## 📂 Project Structure

```
ml_teammate/
├── controller/           # Core logic
├── learners/             # XGBoost, LightGBM, etc.
├── search/               # Optuna, FLAML, etc.
├── utils/                # Metrics, config spaces
├── tutorials/            # Usage examples
├── docs/                 # Modular documentation
└── README.md
```

---

## 🧩 Extending MLTeammate

* Add a custom learner to `learners/`
* Define its config space in `utils/config_spaces.py`
* Register it in your controller + search space

See [`04_add_custom_learner.py`](./tutorials/04_add_custom_learner.py) for a working example.

---

## 📜 License

MIT License — open for improvement and contribution.

---

## 🙌 Author

Built  by a learner [Muma005](https://github.com/muma005)
Feel free to fork, star ⭐, and share feedback.

````

---

## ✅ Alternative Install Options

Once your repo is public on GitHub, users can install it directly using:

```bash
pip install git+https://github.com/yourusername/ml_teammate.git
````

This avoids the need to clone and works well for clean installs.

You can even add a `setup.py` or `pyproject.toml` (optional) to register it on PyPI later if you want `pip install mlteammate`.

---

